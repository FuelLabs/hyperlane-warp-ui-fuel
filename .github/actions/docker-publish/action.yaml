name: 'Build & Push Docker'

inputs:
  compose-version:
    description: 'Docker Compose version'
    default: 2.6.0
  aws_role_arn:
    description: 'AWS IAM role ARN'
    required: true
  image:
    description: 'Image name with provider url'
    required: true
  dockerfile:
    description: 'Path to the Dockerfile'
    required: true
  context:
    description: 'Path to the Context'
    default: .
    required: true
  build-args:
    description: 'List of build-time variables'
    required: false

outputs:
  image:
    description: 'Image url'
    value: ${{ steps.imageOuput.outputs.imageUrl }}
  imageid:
    description: 'Image ID'
    value: ${{ steps.publish.outputs.imageId }}
  digest:
    description: 'Image digest'
    value: ${{ steps.publish.outputs.digest }}
  metadata:
    description: 'Build result metadata'
    value: ${{ steps.publish.outputs.metadata }}

runs:
  using: 'composite'
  steps:
    - name: Configure AWS credentials for ECR publishing
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ inputs.image }}
        tags: |
          type=sha,prefix=
          type=raw,value=sha-{{sha}}-{{date 'YYYYMMDDhhmmss'}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push the image to ghcr.io
      uses: docker/build-push-action@v6
      id: publish
      with:
        context: ${{ inputs.context }}
        #platforms: linux/amd64,linux/arm64
        file: ${{ inputs.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - id: imageOutput
      shell: bash
      run: |
        echo "imageUrl=${{ fromJSON(steps.publish.outputs.metadata)['image.name'] }}" >> $GITHUB_OUTPUT
